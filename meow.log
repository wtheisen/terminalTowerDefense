==15610== Memcheck, a memory error detector
==15610== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==15610== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==15610== Command: ./game
==15610== Parent PID: 2250
==15610== 
==15610== Invalid read of size 8
==15610==    at 0x10A4B8: activateObject (objectLayer.c:39)
==15610==    by 0x109B9E: fireShooter (engine.c:91)
==15610==    by 0x109B9E: advanceGame (engine.c:35)
==15610==    by 0x109161: main (main.c:58)
==15610==  Address 0x10 is not stack'd, malloc'd or (recently) free'd
==15610== 
==15610== 
==15610== Process terminating with default action of signal 11 (SIGSEGV)
==15610==  Access not within mapped region at address 0x10
==15610==    at 0x10A4B8: activateObject (objectLayer.c:39)
==15610==    by 0x109B9E: fireShooter (engine.c:91)
==15610==    by 0x109B9E: advanceGame (engine.c:35)
==15610==    by 0x109161: main (main.c:58)
==15610==  If you believe this happened as a result of a stack
==15610==  overflow in your program's main thread (unlikely but
==15610==  possible), you can try to increase the size of the
==15610==  main thread stack using the --main-stacksize= flag.
==15610==  The main thread stack size used in this run was 8388608.
==15610== 
==15610== HEAP SUMMARY:
==15610==     in use at exit: 187,665 bytes in 393 blocks
==15610==   total heap usage: 429 allocs, 36 frees, 208,023 bytes allocated
==15610== 
==15610== LEAK SUMMARY:
==15610==    definitely lost: 0 bytes in 0 blocks
==15610==    indirectly lost: 0 bytes in 0 blocks
==15610==      possibly lost: 0 bytes in 0 blocks
==15610==    still reachable: 187,665 bytes in 393 blocks
==15610==         suppressed: 0 bytes in 0 blocks
==15610== Rerun with --leak-check=full to see details of leaked memory
==15610== 
==15610== For counts of detected and suppressed errors, rerun with: -v
==15610== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
