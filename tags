!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/b6031a8d/
LOG_DIR	include/logging.h	/^#define LOG_DIR /;"	d
LOG_DIR	src/logging.c	/^        #define LOG_DIR /;"	d	file:
LOG_FILENAME	include/logging.h	/^#define LOG_FILENAME /;"	d
Options	include/commandOptions.h	/^struct Options {$/;"	s
SIZE	include/levelGen.h	/^#define SIZE /;"	d
advanceEnemy	src/engine.c	/^void advanceEnemy(char level[SIZE][SIZE], int i, int j)$/;"	f	typeref:typename:void
advanceGame	src/engine.c	/^void advanceGame(char level[SIZE][SIZE])$/;"	f	typeref:typename:void
all	Makefile	/^all:$/;"	t
binary	Makefile	/^binary=game$/;"	m
cc	Makefile	/^cc=gcc$/;"	m
cflags	Makefile	/^cflags= -std=c99 -O2 -Wextra -Wall -Iinclude\/ -g$/;"	m
clean	Makefile	/^clean:$/;"	t
cleanup	src/loadScreen.c	/^void cleanup(struct Options * Opt)$/;"	f	typeref:typename:void
closeLog	src/logging.c	/^int closeLog()$/;"	f	typeref:typename:int
commandOptions_h	include/commandOptions.h	/^#define commandOptions_h$/;"	d
disableNCurses	include/commandOptions.h	/^    int disableNCurses;$/;"	m	struct:Options	typeref:typename:int
drawGrid	src/draw.c	/^int drawGrid(char level[SIZE][SIZE])$/;"	f	typeref:typename:int
draw_h	include/draw.h	/^#define draw_h$/;"	d
end	src/symbols.c	/^char end = 'E';$/;"	v	typeref:typename:char
enemiesReached	src/engine.c	/^static int enemiesReached = 0;$/;"	v	typeref:typename:int	file:
engine_h	include/engine.h	/^#define engine_h$/;"	d
getCommandArguments	src/commandOptions.c	/^struct Options getCommandArguments(int argc, char ** argv)$/;"	f	typeref:struct:Options
getPathAround	src/engine.c	/^void getPathAround(char level[SIZE][SIZE], int i, int j, int * pathx, int * pathy)$/;"	f	typeref:typename:void
initLog	src/logging.c	/^int initLog()$/;"	f	typeref:typename:int
initOptions	src/commandOptions.c	/^void initOptions(struct Options * O) {$/;"	f	typeref:typename:void
isEnemy	src/engine.c	/^int isEnemy(char c)$/;"	f	typeref:typename:int
isValid	src/engine.c	/^int isValid(int x)$/;"	f	typeref:typename:int
levelGen	src/levelGen.c	/^void levelGen(char level[SIZE][SIZE])$/;"	f	typeref:typename:void
levelGen_h	include/levelGen.h	/^#define levelGen_h$/;"	d
libs	Makefile	/^libs=-lncurses$/;"	m
loadScreen	src/loadScreen.c	/^int loadScreen(struct Options * Opt)$/;"	f	typeref:typename:int
loadScreen_h	include/loadScreen.h	/^#define loadScreen_h$/;"	d
logFilePtr	src/logging.c	/^FILE * logFilePtr;$/;"	v	typeref:typename:FILE *
logging_h	include/logging.h	/^#define logging_h$/;"	d
main	Makefile	/^main=main.c$/;"	m
main	src/main.c	/^int main(int argc, char * argv[])$/;"	f	typeref:typename:int
path	src/symbols.c	/^char path = ' ';$/;"	v	typeref:typename:char
placeholder1	src/symbols.c	/^char placeholder1 = '1';$/;"	v	typeref:typename:char
placeholder2	src/symbols.c	/^char placeholder2 = '2';$/;"	v	typeref:typename:char
setCoord	src/levelGen.c	/^void setCoord(char level[SIZE][SIZE], int x, int y, char c)$/;"	f	typeref:typename:void
skipSplashScreen	include/commandOptions.h	/^    int skipSplashScreen;$/;"	m	struct:Options	typeref:typename:int
spawnEnemy	src/engine.c	/^void spawnEnemy(char level[SIZE][SIZE])$/;"	f	typeref:typename:void
src	Makefile	/^src=src$/;"	m
start	src/symbols.c	/^char start = 'S';$/;"	v	typeref:typename:char
symbols_h	include/symbols.h	/^#define symbols_h$/;"	d
walker	src/symbols.c	/^char walker = 'O';$/;"	v	typeref:typename:char
weeds	src/symbols.c	/^char weeds = '#';$/;"	v	typeref:typename:char
writeLog	src/logging.c	/^void writeLog(const int lineNum, const char * callFunc, char * message)$/;"	f	typeref:typename:void
